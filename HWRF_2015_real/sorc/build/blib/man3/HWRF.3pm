.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HWRF 3"
.TH HWRF 3 "2015-09-02" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HWRF \- Perl extensions for HWRF
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use HWRF;
\&  my $hwrf = HWRF\->new();
\&  $hwrf\->sandbox({dir => "foo"});
\&  $hwrf\->site();
\&  $hwrf\->compiler(vendor => "GNU", cc => "gcc", fc => "gfortran");
\&  $hwrf\->smtp(smtp => "localhost");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1HWRF\s0 module provides Perl functions that are commonly used in
scripts interacting with \s-1HWRF\s0.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&        my $hwrf = HWRF\->new();
.Ve
.PP
Instantiates an \s-1HWRF\s0 object.
.PP
\fIsite\fR
.IX Subsection "site"
.PP
.Vb 1
\&        my $site = $hwrf\->site();
.Ve
.PP
The function \fBsite\fR will try and figure out the site you are currently
running on. This will set the default site name, smtp server and compilers.
.PP
\fIenv\fR
.IX Subsection "env"
.PP
.Vb 1
\&        $c\->envs();
.Ve
.PP
Set the environment variables needed for the \s-1HWRF\s0 build.
.PP
\fIcheck_env\fR
.IX Subsection "check_env"
.PP
.Vb 1
\&       $c\->check_env();
.Ve
.PP
Checks the environment to ensure the user did not set anything that
conflicts with \s-1HWRF\s0.
.PP
\fIcheck_lib_versions\fR
.IX Subsection "check_lib_versions"
.PP
.Vb 1
\&        $c\->check_lib_versions();
.Ve
.PP
Checks library versions to make sure they are sufficient.
.PP
\fIenv\fR
.IX Subsection "env"
.PP
.Vb 1
\&    _impl_check_version(version,required_version,what_is_it);
.Ve
.PP
This is an internal implementation function that you should not call
directly.
.PP
Given a pair of dotted decimal library versions, this checks to see if
the first is greater than or equal to the other.  If it is not, it
croaks with an intelligible message about \f(CW$what_is_it\fR library version
being too old.
.PP
\fIcompiler\fR
.IX Subsection "compiler"
.PP
.Vb 1
\&        $hwrf\->compiler(vendor => "Intel");
\&
\&        my ($vendor, $version, $cc, $fc, $cc_debug, $fc_debug) = $hwrf\->compiler();
.Ve
.PP
The function \fBcompiler\fR cn be used to set or get the current system
compiler.
.PP
\fIsmtp\fR
.IX Subsection "smtp"
.PP
.Vb 1
\&        $hwrf\->smtp(smtp => "localhost");
\&
\&        my $smtp_server = $hwrf\->smtp();
.Ve
.PP
The function \fBsmtp\fR can be used to set or get the current system
\&\s-1SMTP\s0 mail server.
.PP
\fIconfig\fR
.IX Subsection "config"
.PP
.Vb 1
\&        $hwrf\->config();
.Ve
.PP
The function \fBconfig\fR can be used to set and get the local
site configuration variables.
.PP
\fImake_dir\fR
.IX Subsection "make_dir"
.PP
.Vb 3
\&        $hwrf\->make_dir(dir => "foo", mode => mask);
\&or
\&        HWRF::make_dir(dir => "foo", mode => mask);
.Ve
.PP
The function \fBmake_dir\fR will create the directory \fIfoo\fR given in the
argument hash as \fIdir\fR. If a mode argument is given it will set the
directories permissions to \fImask\fR.
.PP
If a directory already exists, it will be renamed with the last modified
timestamp appended to it.
.PP
\&\fBmake_dir\fR can be called in a non-OO method.
.PP
\fIsandbox\fR
.IX Subsection "sandbox"
.PP
.Vb 1
\&        $hwrf\->sandbox(dir => "foo", mode => mask);
.Ve
.PP
The function \fBsandbox\fR will create an empty sandbox directory structure
to compile and run \s-1HWRF\s0 in. It will create a toplevel directory named with
the hash argument \fIdir\fR and two subdirectories called \fIsrc\fR and \fIresults\fR.
.PP
If a \fImode\fR argument is given it will set the directories permissions
to \fImask\fR.
.PP
If no arguments are given it will return the absolute path of the current
sandbox (or undef).
.PP
This command calls \fImake_dir\fR.
.PP
\fIbuild_info\fR
.IX Subsection "build_info"
.PP
.Vb 1
\&        $hwrf\->build_info(file => \*(Aqbuild.info\*(Aq);
.Ve
.PP
The function \fBbuild_info\fR will write information about the \s-1HWRF\s0
build parameters. It will write to \s-1STDOUT\s0 unless a file argument is given.
.PP
Be warned it uses \fB\f(BIcaller\fB\|(0)[1]\fR to obtain the script filename, this
is not very robust and can return the wrong filename.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        ($vendor, $version) = $hwrf\->mpi(file => \*(Aqmpi_info\*(Aq);
.Ve
.PP
The function \fBmpi\fR will obtain information about the current
\&\s-1MPI\s0 implementation. It will return the information as a array and
write it to a file if a file argument is given.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        $hwrf\->mpirun(cmds => (a, b, c), cores => (1, 1, 2));
.Ve
.PP
The function \fBmpirun\fR will run commands specified. It requires
two arguments, \fIcmds\fR and \fIcores\fR. These must be arrays of equal
length. As each command will be launched with the corresponding number
of processors. This is to facilitate multiple program, multiple data (\s-1MPMD\s0).
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        $hwrf\->_mpirun(cmds => (a, b, c), cores => (1, 1, 2));
.Ve
.PP
The function \fB_mpirun\fR is an internal command to execute a \s-1MPI\s0
job on systems that use \fBmpirun\fR with arguments \fI\-np\fR for the 
number of processes per command.
.PP
It requires two arguments, \fIcmds\fR and \fIcores\fR. These must be arrays of
equal length. As each command will be launched with the corresponding
number of processors. This is to facilitate multiple program, multiple
data (\s-1MPMD\s0).
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        $hwrf\->_mpirun_lsf(cmds => (a, b, c), cores => (1, 1, 2));
.Ve
.PP
The function \fB_mpirun_lsf\fR is an internal command to execute a \s-1MPI\s0
job on systems that use \fBmpirun.lsf\fR with a command file specifying
number of processes and command (one per line).
.PP
It will write the commands to a file called \fIcmd.$$\fR, in the current
working directory.
.PP
It requires two arguments, \fIcmds\fR and \fIcores\fR. These must be arrays of
equal length. As each command will be launched with the corresponding
number of processors. This is to facilitate multiple program, multiple
data (\s-1MPMD\s0).
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        ($vendor, $version) = $hwrf\->netcdf(file => \*(Aqnetcdf_info\*(Aq);
.Ve
.PP
The function \fBnetcdf\fR will obtain information about the current
NetCDF library. It will return the information as a array and
write it to a file if a file argument is given.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl (1),
\&\s-1DTC\s0 <http://www.dtcenter.org/>,
\&\s-1HWRF\s0 <http://www.dtcenter.org/HurrWRF/users/index.php>
.SH "AUTHOR"
.IX Header "AUTHOR"
Timothy P Brown, <Timothy.P.Brown@noaa.gov>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011 by Timothy P Brown
