.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HWRF::Component 3"
.TH HWRF::Component 3 "2015-09-02" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HWRF::Component \- Perl generic module for HWRF Components.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package HWRF::TNE;
\&  our @ISA = qw(Exporter HWRF::Component);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The HWRF::Component module provides a skelaton class for all the \s-1HWRF\s0
modules.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&        my $c = HWRF::Component\->new();
.Ve
.PP
Instantiates an HWRF::Component object.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        $c\->use_renamer();
.Ve
.PP
Updates the internal list of executables from the HWRF::Renamer
specified when running HWRF::Component\->new.  Unless this is called,
the HWRF::Renamer will be unused by all other routines.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 6
\&        $c\->run(cmd => "command",
\&                args => \e@arguments,
\&                envs => \e%vars,
\&                stdout => "stdout.txt",
\&                stderr => "stderr.txt"
\&        );
.Ve
.PP
The function \fBrun\fR will run the \fBcommand\fR using \fIIPC::Open3\fR.
.PP
If there are any arguments they will be appended to the command
when run.
.PP
Standard output and error can be saved to files if desired. If only
a filename for standard output is give, standard error is sent to the
same file.
.PP
If the verbose level is above 5, standard output and error are printed
to \s-1STDOUT\s0 and \s-1STDERR\s0 as well.
.PP
If there is an error (non-zero exit status from the command),
the routine will die using \fBcarp\fR.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 2
\&        $c\->svn_co(dst => \*(Aqfoo\*(Aq, url => \*(Aqhttps://example.com\*(Aq,
\&                path => \*(Aq/trunk\*(Aq, rev => \*(AqHEAD\*(Aq);
.Ve
.PP
The function \fBsvn_co\fR will issue a \s-1SVN\s0 checkout command.
Options are:
.IP "\fBdst =\fR 'foo'>" 4
.IX Item "dst = 'foo'>"
The destination directory to check the source into.
.IP "\fBurl =\fR 'https://example.com'>" 4
.IX Item "url = 'https://example.com'>"
The repository \s-1URL\s0.
.IP "\fBpath =\fR '/trunk'>" 4
.IX Item "path = '/trunk'>"
Any futher path specifications for the \s-1URL\s0.
.IP "\fBrev =\fR '\s-1HEAD\s0'>" 4
.IX Item "rev = 'HEAD'>"
The repository revision number.
.PP
This command calls \fI\f(CI$self\fI\-\fR\fIrun()\fR>
.PP
\fIsource\fR
.IX Subsection "source"
.PP
.Vb 1
\&        $c\->source();
.Ve
.PP
The function \fBsource\fR will extract the source into the destination directory.
.PP
It will do nothing if \fB\f(CB$c\fB\-\fR{\s-1SRC\s0}\->{\s-1RET\s0}> is not set to 1 (default value).
.PP
If the package exists on the filesystem in a tar ball, it will extract
that using \fB\f(BIuntar()\fB\fR otherwise it will try and do an \s-1SVN\s0 check-out
using \fB\f(BIsvn_co()\fB\fR.
.PP
\fIuntar\fR
.IX Subsection "untar"
.PP
.Vb 1
\&        $c\->untar();
.Ve
.PP
The function \fBuntar\fR will a source tarball. It does this by calling
\&\fBtar\fR and optionally \fBgzip\fR or \fBbzip2\fR.
.PP
It should be noted that \fBArchive::Tar\fR could be a nicer solution.
.PP
\fIenv\fR
.IX Subsection "env"
.PP
.Vb 1
\&        $c\->envs();
.Ve
.PP
Set the environment variables needed for the component.
.PP
\fIconfigure\fR
.IX Subsection "configure"
.PP
.Vb 1
\&        $c\->configure();
.Ve
.PP
Configure the module. This will run \fIconfigure\fR within the modules
source directory.
.PP
\fIpatch_config\fR
.IX Subsection "patch_config"
.PP
.Vb 1
\&        $c\->patch_config(file => "arch/Config_new.pl");
.Ve
.PP
The function \fBpatch_config\fR will patch the file \fIarch/Config.pl\fR
unless the option \fIfile\fR is specified. It will add on the first
blank line in the file:
	select((select(\s-1STDOUT\s0), $|=1)[0]);
This is to make \s-1STDOUT\s0 hot, so that perl flushes it whenever data
is written, even if it is not attached to a tty.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        $c\->patch();
.Ve
.PP
The function \fBpatch\fR will apply any package/compiler/site specific
patches needed before compiling the module.
.PP
This is only a place holder function in this module.
.PP
\fIupdate_conf\fR
.IX Subsection "update_conf"
.PP
.Vb 1
\&        $c\->update_conf();
.Ve
.PP
The function \fBupdate_conf\fR will update the configuration file adding/changing
any options that might be needed.
.PP
Typical usages:
.IP " Changing the debugging options to the C and Fortran compiler flags." 4
.IX Item " Changing the debugging options to the C and Fortran compiler flags."
.PD 0
.IP " Changing the path of \s-1CPP\s0 for different platforms." 4
.IX Item " Changing the path of CPP for different platforms."
.PD
.PP
This is only a place holder function in this module.
.PP
\fIcompile\fR
.IX Subsection "compile"
.PP
.Vb 1
\&        $c\->compile();
.Ve
.PP
Compile the module, writing stdout to \fIcompile.log\fR and stderr
to \fIcompile.err\fR.
.PP
\fIcompiler\fR
.IX Subsection "compiler"
.PP
.Vb 1
\&        $c\->compiler();
.Ve
.PP
The function \fBcompiler\fR sets the compiler options. These are:
.IP "Vendor" 4
.IX Item "Vendor"
The vendors name of the compiler suite.
.IP "Version" 4
.IX Item "Version"
The version number of the compiler suite.
.IP "\s-1CC\s0" 4
.IX Item "CC"
The C compiler program name.
.IP "\s-1CC_DEBUG\s0" 4
.IX Item "CC_DEBUG"
The C flags to enable debugging. That is the compile unopimized and
debugging symbols flags.
.IP "\s-1FC\s0" 4
.IX Item "FC"
The Fortran compiler program name.
.IP "\s-1FC_DEBUG\s0" 4
.IX Item "FC_DEBUG"
The Fortran flags to enable debugging. That is the compile unopimized and
debugging symbols flags.
.PP
\fIinfo\fR
.IX Subsection "info"
.PP
.Vb 1
\&        $c\->info();
.Ve
.PP
The function \fBinfo\fR will retrieve all the information regarding the
component. If the option \fBfile\fR is given it will append the output
to the named file, otherwise it will be written to \s-1STDOUT\s0.
.PP
Currently the following information is written:
.IP "\s-1SVN\s0 Revision." 4
.IX Item "SVN Revision."
The components \s-1SVN\s0 revision number.
.IP "\s-1SVN\s0 Commit time." 4
.IX Item "SVN Commit time."
The components \s-1SVN\s0 commit time for the current revision.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        $c\->store(file => "component.dat");
.Ve
.PP
The function \fBstore\fR will dump the modules data structures to the named file
using \fBStorable\fR.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 1
\&        $c\->retrieve(file => "component.dat");
.Ve
.PP
The function \fBretrieve\fR will retrieve the modules data structures from
the named file using \fBStorable\fR.
.PP
\fIcheck_execs\fR
.IX Subsection "check_execs"
.PP
.Vb 1
\&        $c\->check_execs();
.Ve
.PP
The function \fBcheck_execs\fR will check for the existance of all the components
executables.
.PP
\fIinstall\fR
.IX Subsection "install"
.PP
.Vb 1
\&        $c\->install(dst => "/usr/local/bin", (options));
.Ve
.PP
The function \fBinstall\fR will install all the components executables in
the \fIdst\fR directory.  If use_renamer was called prior to this
function, then the renamer will be used to decide where to install
programs, where to get them from, and which programs to install.
.PP
If no HWRF::Renamer was given, the options \fIprefix\fR and \fIsuffix\fR are used:
.PP
Optional \fIprefix\fR argument can be specified to to add a prefix to all
executables. \fBNote\fR this is messy as if the executable already has this
prefix then it is \fB\s-1NOT\s0\fR added.
.PP
Optional \fIsuffix\fR argument can be specified to modify the default file
suffix of \*(L".exe\*(R".
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 2
\&        $util\->cmp(sim1 => \*(Aq4820/results/07L/2008082718\*(Aq,
\&                   sim2 => \*(Aq4881/results/07L/2008082718\*(Aq);
.Ve
.PP
The function \fBcmp\fR will compare by calling the systems diff command,
the output of two simulation outputs.
.PP
It will return a list of file names that differ.
.PP
\fI\fR
.IX Subsection ""
.PP
.Vb 2
\&        $util\->diffwrf(file1 => \*(Aqa/wrfout_d02_2008\-09\-02_00:00:00\*(Aq,
\&                       file2 => \*(Aqb/wrfout_d02_2008\-09\-02_00:00:00\*(Aq);
.Ve
.PP
The function \fBdiffwrf\fR will call diffwrf on the two \s-1WRF\s0 output files.
.PP
It will not hide any of the gory details, they will be written to \s-1STDOUT\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl (1),
\&\s-1DTC\s0 <http://www.dtcenter.org/>,
\&\s-1HWRF\s0 <http://www.dtcenter.org/HurrWRF/users/index.php>
.SH "AUTHOR"
.IX Header "AUTHOR"
Timothy P Brown, <Timothy.P.Brown@noaa.gov>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011 by Timothy P Brown
